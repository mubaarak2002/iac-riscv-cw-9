$version Generated by VerilatedVcd $end
$date Sun Dec 11 16:22:36 2022 $end
$timescale 1ps $end

 $scope module TOP $end
  $var wire  4 x ALUctrl_Out [3:0] $end
  $var wire  1 y ALUsrc_Out $end
  $var wire 32 !! Data_Out [31:0] $end
  $var wire 16 } Decode_PC_Out [15:0] $end
  $var wire 32 i ImmExt_Out [31:0] $end
  $var wire 25 | ImmOp_Out [24:0] $end
  $var wire  3 z Immsrc_Out [2:0] $end
  $var wire 32 l Instruction_Out [31:0] $end
  $var wire 32 p MemAddr_Out [31:0] $end
  $var wire 32 q MemData_Out [31:0] $end
  $var wire  1 w MemWrite_Out $end
  $var wire 16 j PC_Out [15:0] $end
  $var wire 16 k PC_Target_Out [15:0] $end
  $var wire 16 m PC_new_Out [15:0] $end
  $var wire  1 u PCsrc_Out $end
  $var wire  5 s RA1_Out [4:0] $end
  $var wire  5 t RA2_Out [4:0] $end
  $var wire 32 n RD1_Out [31:0] $end
  $var wire 32 o RD2_Out [31:0] $end
  $var wire  1 { RegWrite_Out $end
  $var wire  1 v Resultsrc_Out $end
  $var wire  5 ~ WrAddr_Out [4:0] $end
  $var wire  1 r ZERO_Out $end
  $var wire  1 g clk $end
  $var wire  1 h rst $end
  $scope module cpu $end
   $var wire 32 $! ADDRESS_WIDTH [31:0] $end
   $var wire 32 '! ALUCTRL_WIDTH [31:0] $end
   $var wire 32 4 ALU_OP2 [31:0] $end
   $var wire 32 5 ALU_Result [31:0] $end
   $var wire  4 / ALUctrl [3:0] $end
   $var wire  4 x ALUctrl_Out [3:0] $end
   $var wire  1 0 ALUsrc $end
   $var wire  1 y ALUsrc_Out $end
   $var wire 32 %! DATA_WIDTH [31:0] $end
   $var wire 32 6 DOut [31:0] $end
   $var wire 32 !! Data_Out [31:0] $end
   $var wire 16 } Decode_PC_Out [15:0] $end
   $var wire 32 )! IMMOP_WIDTH [31:0] $end
   $var wire 32 (! IMMSRC_WIDTH [31:0] $end
   $var wire 32 %! INSTR_WIDTH [31:0] $end
   $var wire 32 3 ImmExt [31:0] $end
   $var wire 32 i ImmExt_Out [31:0] $end
   $var wire 25 2 ImmOp [24:0] $end
   $var wire 25 | ImmOp_Out [24:0] $end
   $var wire  3 1 ImmSel [2:0] $end
   $var wire  3 z Immsrc_Out [2:0] $end
   $var wire 32 a Instr [31:0] $end
   $var wire 32 l Instruction_Out [31:0] $end
   $var wire 32 p MemAddr_Out [31:0] $end
   $var wire 32 q MemData_Out [31:0] $end
   $var wire 32 -! MemWrAdd [31:0] $end
   $var wire  1 ( MemWrite $end
   $var wire  1 w MemWrite_Out $end
   $var wire 32 7 Memory_Read [31:0] $end
   $var wire 16 *! PC [15:0] $end
   $var wire 16 ` PC_Next_Cycle [15:0] $end
   $var wire 16 j PC_Out [15:0] $end
   $var wire 16 # PC_Target [15:0] $end
   $var wire 16 k PC_Target_Out [15:0] $end
   $var wire 32 &! PC_WIDTH [31:0] $end
   $var wire 16 +! PC_new [15:0] $end
   $var wire 16 m PC_new_Out [15:0] $end
   $var wire 16 $ PC_to_Extend [15:0] $end
   $var wire 16 ,! PC_to_PCreg [15:0] $end
   $var wire  1 % PCsrc $end
   $var wire  1 u PCsrc_Out $end
   $var wire  5 * RA1 [4:0] $end
   $var wire  5 s RA1_Out [4:0] $end
   $var wire  5 , RA2 [4:0] $end
   $var wire  5 t RA2_Out [4:0] $end
   $var wire 32 + RD1 [31:0] $end
   $var wire 32 n RD1_Out [31:0] $end
   $var wire 32 - RD2 [31:0] $end
   $var wire 32 o RD2_Out [31:0] $end
   $var wire  1 { RegWrite_Out $end
   $var wire  1 ' Resultsrc $end
   $var wire  1 v Resultsrc_Out $end
   $var wire  5 . WA3 [4:0] $end
   $var wire  1 ) WEn $end
   $var wire  5 ~ WrAddr_Out [4:0] $end
   $var wire  1 r ZERO_Out $end
   $var wire  1 g clk $end
   $var wire  1 h rst $end
   $var wire  1 & zero $end
   $scope module ALU $end
    $var wire 32 '! ALUCTRL_WIDTH [31:0] $end
    $var wire  4 / ALUCtrl [3:0] $end
    $var wire 32 + ALUop1 [31:0] $end
    $var wire 32 4 ALUop2 [31:0] $end
    $var wire 32 %! DATA_WIDTH [31:0] $end
    $var wire 32 5 SUM [31:0] $end
    $var wire  1 & ZERO $end
   $upscope $end
   $scope module ALUMux $end
    $var wire 32 %! WORD_WIDTH [31:0] $end
    $var wire 32 4 dout [31:0] $end
    $var wire 32 - option0 [31:0] $end
    $var wire 32 3 option1 [31:0] $end
    $var wire  1 0 sel $end
   $upscope $end
   $scope module Decoder $end
    $var wire 32 '! ALUCTRLW [31:0] $end
    $var wire  4 / ALUctrl [3:0] $end
    $var wire  4 = ALUopcode [3:0] $end
    $var wire  1 0 ALUsrc $end
    $var wire 32 (! BRCHCDEW [31:0] $end
    $var wire 32 )! IMMOPW [31:0] $end
    $var wire 32 (! IMMSELW [31:0] $end
    $var wire 32 %! INSTRW [31:0] $end
    $var wire 25 ; Imm [24:0] $end
    $var wire 25 2 ImmOp [24:0] $end
    $var wire  3 1 Immsrc [2:0] $end
    $var wire 32 a Instruction [31:0] $end
    $var wire 32 %! MEMWRITEW [31:0] $end
    $var wire  1 ( MemWrite $end
    $var wire 32 0! OPCODEW [31:0] $end
    $var wire 16 $ PC [15:0] $end
    $var wire  1 % PCSrc $end
    $var wire 32 &! PCWIDTH [31:0] $end
    $var wire 16 +! PC_next [15:0] $end
    $var wire 32 $! RDADDR1W [31:0] $end
    $var wire 32 $! RDADDR2W [31:0] $end
    $var wire  5 * RdAdd1 [4:0] $end
    $var wire  5 , RdAdd2 [4:0] $end
    $var wire  1 ) RegWrite $end
    $var wire  1 ' ResultSrc $end
    $var wire 32 $! SHORTIMMW [31:0] $end
    $var wire  5 2! ShortImm [4:0] $end
    $var wire 32 /! UPPERIMW [31:0] $end
    $var wire 20 1! UpperImm [19:0] $end
    $var wire 32 $! WRADDRW [31:0] $end
    $var wire  5 . WrAddr [4:0] $end
    $var wire  1 & ZERO [0:0] $end
    $var wire 32 .! ZEROW [31:0] $end
    $var wire  3 ? branchcode [2:0] $end
    $var wire  7 < opcode [6:0] $end
    $var wire  5 > r0 [4:0] $end
    $var wire  5 8 rd [4:0] $end
    $var wire  5 9 rs1 [4:0] $end
    $var wire  5 : rs2 [4:0] $end
   $upscope $end
   $scope module DoutMux $end
    $var wire 32 %! WORD_WIDTH [31:0] $end
    $var wire 32 6 dout [31:0] $end
    $var wire 32 5 option0 [31:0] $end
    $var wire 32 7 option1 [31:0] $end
    $var wire  1 ' sel $end
   $upscope $end
   $scope module MemFile $end
    $var wire 32 &! ADDRESS_WIDTH [31:0] $end
    $var wire 32 !! ALUresult [31:0] $end
    $var wire 32 %! DATA_WIDTH [31:0] $end
    $var wire 32 7 ReadData [31:0] $end
    $var wire  1 ( WEN $end
    $var wire 32 - WriteData [31:0] $end
    $var wire  1 g clk $end
   $upscope $end
   $scope module PCMem $end
    $var wire 32 &! ADDRESS_WIDTH [31:0] $end
    $var wire 32 %! DATA_WIDTH [31:0] $end
    $var wire 16 ` PC [15:0] $end
    $var wire 32 a instr [31:0] $end
    $var wire  8 b instrByte1 [7:0] $end
    $var wire  8 c instrByte2 [7:0] $end
    $var wire  8 d instrByte3 [7:0] $end
    $var wire  8 e instrByte4 [7:0] $end
   $upscope $end
   $scope module PCTarget $end
    $var wire 32 %! DATA_WIDTH [31:0] $end
    $var wire 32 3 ImmExt [31:0] $end
    $var wire 16 *! PC [15:0] $end
    $var wire 16 # PC_Target [15:0] $end
    $var wire 32 &! PC_WIDTH [31:0] $end
   $upscope $end
   $scope module ProgramCounter $end
    $var wire 16 ` PC [15:0] $end
    $var wire 16 # PC_Target [15:0] $end
    $var wire 32 &! PC_WIDTH [31:0] $end
    $var wire  1 % PCsrc $end
    $var wire 16 "! branch_PC [15:0] $end
    $var wire  1 g clk $end
    $var wire 16 f inc_PC [15:0] $end
    $var wire 16 #! next_PC [15:0] $end
    $var wire  1 h rst $end
   $upscope $end
   $scope module RegFile $end
    $var wire 32 $! ADDRESS_WIDTH [31:0] $end
    $var wire  5 * RA1 [4:0] $end
    $var wire  5 , RA2 [4:0] $end
    $var wire 32 + RD1 [31:0] $end
    $var wire 32 - RD2 [31:0] $end
    $var wire  5 . WA3 [4:0] $end
    $var wire 32 6 WD3 [31:0] $end
    $var wire  1 ) WEN $end
    $var wire 32 %! WORD_WIDTH [31:0] $end
    $var wire  1 g clk $end
    $var wire 32 @ rom_array[0] [31:0] $end
    $var wire 32 J rom_array[10] [31:0] $end
    $var wire 32 K rom_array[11] [31:0] $end
    $var wire 32 L rom_array[12] [31:0] $end
    $var wire 32 M rom_array[13] [31:0] $end
    $var wire 32 N rom_array[14] [31:0] $end
    $var wire 32 O rom_array[15] [31:0] $end
    $var wire 32 P rom_array[16] [31:0] $end
    $var wire 32 Q rom_array[17] [31:0] $end
    $var wire 32 R rom_array[18] [31:0] $end
    $var wire 32 S rom_array[19] [31:0] $end
    $var wire 32 A rom_array[1] [31:0] $end
    $var wire 32 T rom_array[20] [31:0] $end
    $var wire 32 U rom_array[21] [31:0] $end
    $var wire 32 V rom_array[22] [31:0] $end
    $var wire 32 W rom_array[23] [31:0] $end
    $var wire 32 X rom_array[24] [31:0] $end
    $var wire 32 Y rom_array[25] [31:0] $end
    $var wire 32 Z rom_array[26] [31:0] $end
    $var wire 32 [ rom_array[27] [31:0] $end
    $var wire 32 \ rom_array[28] [31:0] $end
    $var wire 32 ] rom_array[29] [31:0] $end
    $var wire 32 B rom_array[2] [31:0] $end
    $var wire 32 ^ rom_array[30] [31:0] $end
    $var wire 32 _ rom_array[31] [31:0] $end
    $var wire 32 C rom_array[3] [31:0] $end
    $var wire 32 D rom_array[4] [31:0] $end
    $var wire 32 E rom_array[5] [31:0] $end
    $var wire 32 F rom_array[6] [31:0] $end
    $var wire 32 G rom_array[7] [31:0] $end
    $var wire 32 H rom_array[8] [31:0] $end
    $var wire 32 I rom_array[9] [31:0] $end
   $upscope $end
   $scope module SignExt $end
    $var wire 32 %! DATA_WIDTH [31:0] $end
    $var wire 25 2 Imm [31:7] $end
    $var wire 32 3 ImmExt [31:0] $end
    $var wire  3 1 ImmSel [2:0] $end
   $upscope $end
  $upscope $end
 $upscope $end
$enddefinitions $end


#0
b0000000000000000 #
b0000000000000000 $
0%
0&
0'
0(
0)
b00000 *
b00000000000000000000000000000000 +
b00000 ,
b00000000000000000000000000000000 -
b00000 .
b0000 /
00
b000 1
b0000000000000000000000000 2
b00000000000000000000000000000000 3
b00000000000000000000000000000000 4
b00000000000000000000000000000000 5
b00000000000000000000000000000000 6
b00000000000000000000000000000000 7
b00000 8
b00000 9
b00000 :
b0000000000000000000000000 ;
b0000000 <
b0000 =
b00000 >
b000 ?
b00000000000000000000000000000000 @
b00000000000000000000000000000000 A
b00000000000000000000000000000000 B
b00000000000000000000000000000000 C
b00000000000000000000000000000000 D
b00000000000000000000000000000000 E
b00000000000000000000000000000000 F
b00000000000000000000000000000000 G
b00000000000000000000000000000000 H
b00000000000000000000000000000000 I
b00000000000000000000000000000000 J
b00000000000000000000000000000000 K
b00000000000000000000000000000000 L
b00000000000000000000000000000000 M
b00000000000000000000000000000000 N
b00000000000000000000000000000000 O
b00000000000000000000000000000000 P
b00000000000000000000000000000000 Q
b00000000000000000000000000000000 R
b00000000000000000000000000000000 S
b00000000000000000000000000000000 T
b00000000000000000000000000000000 U
b00000000000000000000000000000000 V
b00000000000000000000000000000000 W
b00000000000000000000000000000000 X
b00000000000000000000000000000000 Y
b00000000000000000000000000000000 Z
b00000000000000000000000000000000 [
b00000000000000000000000000000000 \
b00000000000000000000000000000000 ]
b00000000000000000000000000000000 ^
b00000000000000000000000000000000 _
b0000000000000000 `
b00000000000000000000000000000000 a
b00000000 b
b00000000 c
b00000000 d
b00000000 e
b0000000000000100 f
0g
0h
b00000000000000000000000000000000 i
b0000000000000000 j
b0000000000000000 k
b00000000000000000000000000000000 l
b0000000000000000 m
b00000000000000000000000000000000 n
b00000000000000000000000000000000 o
b00000000000000000000000000000000 p
b00000000000000000000000000000000 q
0r
b00000 s
b00000 t
0u
0v
0w
b0000 x
0y
b000 z
0{
b0000000000000000000000000 |
b0000000000000000 }
b00000 ~
b00000000000000000000000000000000 !!
b0000000000000000 "!
b0000000000000100 #!
b00000000000000000000000000000101 $!
b00000000000000000000000000100000 %!
b00000000000000000000000000010000 &!
b00000000000000000000000000000100 '!
b00000000000000000000000000000011 (!
b00000000000000000000000000011001 )!
b0000000000000000 *!
b0000000000000000 +!
b0000000000000000 ,!
b00000000000000000000000000000000 -!
b00000000000000000000000000000001 .!
b00000000000000000000000000010100 /!
b00000000000000000000000000000111 0!
b00000000000000000000 1!
b00000 2!
#1
1&
1)
10
b0010011 <
b00000000000000000000000000010011 a
b00010011 b
1g
b00000000000000000000000000010011 l
1r
1y
1{
#2
0g
#3
b0000000011111111 #
0&
b00110 .
b0000111111110000000000110 2
b00000000000000000000000011111111 3
b00000000000000000000000011111111 4
b00000000000000000000000011111111 5
b00000000000000000000000011111111 6
b00110 8
b11111 :
b0000111111110000000000110 ;
b0000000000000100 `
b00001111111100000000001100010011 a
b00000011 c
b11110000 d
b00001111 e
b0000000000001000 f
1g
b00000000000000000000000011111111 i
b0000000011111111 k
b00001111111100000000001100010011 l
0r
b0000111111110000000000110 |
b00110 ~
b00000000000000000000000011111111 !!
b0000000100000011 "!
b0000000000001000 #!
#4
0g
#5
b0000000000100000 #
b00111 .
b0000001000000000000000111 2
b00000000000000000000000000100000 3
b00000000000000000000000000100000 4
b00000000000000000000000000100000 5
b00000000000000000000000000100000 6
b00111 8
b00000 :
b0000001000000000000000111 ;
b00000000000000000000000011111111 F
b0000000000001000 `
b00000010000000000000001110010011 a
b10010011 b
b00000000 d
b00000010 e
b0000000000001100 f
1g
b00000000000000000000000000100000 i
b0000000000100000 k
b00000010000000000000001110010011 l
b0000001000000000000000111 |
b00111 ~
b00000000000000000000000000100000 !!
b0000000000101000 "!
b0000000000001100 #!
#6
0g
#7
b0000000000001000 #
b11100 .
b0000000010000000000011100 2
b00000000000000000000000000001000 3
b00000000000000000000000000001000 4
b00000000000000000000000000001000 5
b00000000000000000000000000001000 6
b11100 8
b01000 :
b0000000010000000000011100 ;
b00000000000000000000000000100000 G
b0000000000001100 `
b00000000100000000000111000010011 a
b00010011 b
b00001110 c
b10000000 d
b00000000 e
b0000000000010000 f
1g
b00000000000000000000000000001000 i
b0000000000001000 k
b00000000100000000000111000010011 l
b0000000010000000000011100 |
b11100 ~
b00000000000000000000000000001000 !!
b0000000000010100 "!
b0000000000010000 #!
#8
0g
#9
b0000000000010000 #
1'
1(
0)
b00110 ,
b00000000000000000000000011111111 -
b00000 .
00
b010 1
b0000000001100000001010000 2
b00000000000000000000000000010000 3
b00000000000000000000000011111111 4
b00000000000000000000000011111111 5
b00000000000000000000000000000000 6
b10000 8
b00110 :
b0000000001100000001010000 ;
b0100011 <
b0010 =
b010 ?
b00000000000000000000000000001000 \
b0000000000010000 `
b00000000011000000010100000100011 a
b00100011 b
b00101000 c
b01100000 d
b0000000000010100 f
1g
b00000000000000000000000000010000 i
b0000000000010000 k
b00000000011000000010100000100011 l
b00000000000000000000000011111111 o
b00110 t
1v
1w
0y
b010 z
0{
b0000000001100000001010000 |
b00000 ~
b00000000000000000000000000000000 !!
b0000000000100000 "!
b0000000000010100 #!
#10
0g
